{"paragraphs":[{"text":"%sh\n\n#cat z.noteTextbox(\"benchmark_dir\")+\"/int-list-filter/01_OracleJDK8IntListFilter.csv\" ","user":"anonymous","dateUpdated":"2019-11-28T20:44:00-0500","config":{"editorSetting":{"language":"sh","editOnDblClick":false,"completionKey":"TAB","completionSupport":false},"colWidth":12,"editorMode":"ace/mode/sh","fontSize":9,"results":{},"enabled":true},"settings":{"params":{"benchmark_dir":""},"forms":{}},"apps":[],"jobName":"paragraph_1574991056858_-1996808275","id":"20191111-225441_454322142","dateCreated":"2019-11-28T20:30:56-0500","dateStarted":"2019-11-28T20:44:00-0500","dateFinished":"2019-11-28T20:44:00-0500","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3581","results":{"code":"SUCCESS","msg":[]}},{"text":"//TODO: Update this directory to match where your JVMs Compare Benchmark Results in CSV format are located.\nval projectk_dir = \"/Users/cguntur/projects/jvms-compare\"\nval benchmark_dir = project_dir + \"/benchmark-results\"\nprintln(\"Using benchmark results from: \" + benchmark_dir)\n\n// Update this list if there are other or different JDKs being compared.\nval jdks = List(\"OracleJDK8\", \"GraalEE\", \"GraalCE\", \"AdoptOpenJDK8Hotspot\", \"AdoptOpenJDKOpenJ9\", \"OpenJDK11Hotspot\", \"OpenJDK11Graal\", \"GraalEEC2\")\n\n// This is an experimental run with 1k size. Alter value if a different size is used during the benchmark execution.\nval size = \"1 Thousand\"\n\nvar csvFile = project_dir\"+\"/dummy.csv\"\nval benchmarkData = spark.read.option(\"header\", \"true\").csv(csvFile)\n\n// Define the columns extracted directly from the CSV content\nvar df = benchmarkData.toDF(\"Benchmark\", \"Mode\", \"Threads\", \"Samples\", \"Score\", \"Error\", \"Units\")\n\n// Add a JDK column with values that are sequentially listed in the jdks val above. \n// JDKs map to the prefixed number in the results.\ndf = df.withColumn(\"JDK\", when($\"Mode\".isNull, \"\").otherwise(\"\"))\n\n//df = df.withColumn(\"Benchmark\", substring($\"Benchmark\", 23, 200))\ndf = df.withColumn(\"Benchmark\", when($\"Mode\".isNull, \"\").otherwise(\"\"))\n\nvar dataFrame = df.withColumn(\"Size\", when($\"Mode\".isNull, \"\").otherwise(\"\"))\n\nfor (i <- 1 to 8) {\n    csvFile = benchmark_dir+\"/*/0\" + i + \"*.csv\"\n\n    val benchmarkData = spark.read.option(\"header\", \"true\").csv(csvFile)\n\n    var df = benchmarkData.toDF(\"Benchmark\", \"Mode\", \"Threads\", \"Samples\", \"Score\", \"Error\", \"Units\")\n\n    // Add a JDK column with values that are sequentially listed in the jdks val above. \n    // JDKs map to the prefixed number in the results.\n    // For instance, OracleJDK8 is the first run and its prefix for results is 01.\n    df = df.withColumn(\"JDK\", when($\"Mode\".isNull, \"\").otherwise(jdks(i - 1)))\n\n    // Add a Benchmark column that extracts its value from the CSV Benchmark column\n    var benchmarkNames = $\"Benchmark\" splitAt ($\"Benchmark\" lastIndexOf '.')\n    println(\"Extracting [\" + jdks(0) + \"] benchmarks for [\" + benchmarkNames(0) + \"]\")\n    //TODO: Fix this\n    df = df.withColumn(\"Benchmark\", substring($\"Benchmark\", 23, 200))\n\n    df = df.withColumn(\"Size\", when($\"Mode\".isNull, \"\").otherwise(\"1 Thousand\"))\n\n    dataFrame = dataFrame.union(df)\n}\n\ndataFrame.registerTempTable(\"benchmarks\")","user":"anonymous","dateUpdated":"2019-11-28T21:09:15-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{"benchmark_dir":""},"forms":{"benchmark_dir":{"type":"TextBox","name":"benchmark_dir","displayName":"benchmark_dir","defaultValue":"","hidden":false,"$$hashKey":"object:5373"}}},"apps":[],"jobName":"paragraph_1574991056874_2008406167","id":"20191111-225606_73930282","dateCreated":"2019-11-28T20:30:56-0500","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:3582","dateFinished":"2019-11-28T20:44:07-0500","dateStarted":"2019-11-28T20:44:00-0500","results":{"code":"ERROR","msg":[{"type":"TEXT","data":"warning: there was one deprecation warning; re-run with -deprecation for details\nUsing benchmark results from: \njava.io.IOException: Error accessing file:/.fseventsd\n  at org.apache.hadoop.fs.FileSystem.listStatus(FileSystem.java:1519)\n  at org.apache.hadoop.fs.FileSystem.listStatus(FileSystem.java:1557)\n  at org.apache.hadoop.fs.ChecksumFileSystem.listStatus(ChecksumFileSystem.java:674)\n  at org.apache.hadoop.fs.Globber.listStatus(Globber.java:69)\n  at org.apache.hadoop.fs.Globber.glob(Globber.java:217)\n  at org.apache.hadoop.fs.FileSystem.globStatus(FileSystem.java:1657)\n  at org.apache.spark.deploy.SparkHadoopUtil.globPath(SparkHadoopUtil.scala:234)\n  at org.apache.spark.deploy.SparkHadoopUtil.globPathIfNecessary(SparkHadoopUtil.scala:244)\n  at org.apache.spark.sql.execution.datasources.DataSource$.org$apache$spark$sql$execution$datasources$DataSource$$checkAndGlobPathIfNecessary(DataSource.scala:618)\n  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:350)\n  at org.apache.spark.sql.execution.datasources.DataSource$$anonfun$14.apply(DataSource.scala:350)\n  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)\n  at scala.collection.TraversableLike$$anonfun$flatMap$1.apply(TraversableLike.scala:241)\n  at scala.collection.immutable.List.foreach(List.scala:381)\n  at scala.collection.TraversableLike$class.flatMap(TraversableLike.scala:241)\n  at scala.collection.immutable.List.flatMap(List.scala:344)\n  at org.apache.spark.sql.execution.datasources.DataSource.resolveRelation(DataSource.scala:349)\n  at org.apache.spark.sql.DataFrameReader.load(DataFrameReader.scala:178)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:533)\n  at org.apache.spark.sql.DataFrameReader.csv(DataFrameReader.scala:412)\n  ... 47 elided\n"}]}},{"text":"%sql \n\nselect * from benchmarks\nwhere Benchmark=\"${Benchmark=IntListFilter.filterEC}\"","user":"anonymous","dateUpdated":"2019-11-28T20:30:56-0500","config":{"editorSetting":{"language":"sql","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/sql","fontSize":9,"runOnSelectionChange":true,"results":{"0":{"graph":{"mode":"multiBarChart","height":300,"optionOpen":true,"setting":{"table":{"tableGridState":{"columns":[{"name":"Benchmark","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Mode","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Threads","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Samples","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Score","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Error","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Units","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"JDK","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""},{"name":"Size","visible":true,"width":"*","sort":{},"filters":[{}],"pinned":""}],"scrollFocus":{},"selection":[],"grouping":{"grouping":[],"aggregations":[],"rowExpandedStates":{}},"treeView":{},"pagination":{"paginationCurrentPage":1,"paginationPageSize":250}},"tableColumnTypeState":{"names":{"Benchmark":"string","Mode":"string","Threads":"string","Samples":"string","Score":"string","Error":"string","Units":"string","JDK":"string","Size":"string"},"updated":false},"tableOptionSpecHash":"[{\"name\":\"useFilter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable filter for columns\"},{\"name\":\"showPagination\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable pagination for better navigation\"},{\"name\":\"showAggregationFooter\",\"valueType\":\"boolean\",\"defaultValue\":false,\"widget\":\"checkbox\",\"description\":\"Enable a footer for displaying aggregated values\"}]","tableOptionValue":{"useFilter":true,"showPagination":false,"showAggregationFooter":true},"updated":false,"initialized":false},"multiBarChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","stacked":false},"stackedAreaChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default","style":"stream"},"lineChart":{"rotate":{"degree":"-45"},"xLabelStatus":"default"}},"commonSetting":{},"keys":[{"name":"Benchmark","index":0,"aggr":"sum"}],"groups":[{"name":"JDK","index":7,"aggr":"sum"}],"values":[{"name":"Score","index":4,"aggr":"sum"}]},"helium":{}}},"enabled":true},"settings":{"params":{"Benchmark":"IntListFilter.filterEC"},"forms":{"Benchmark":{"type":"TextBox","name":"Benchmark","defaultValue":"IntListFilter.filterEC","hidden":false,"$$hashKey":"object:3691"}}},"apps":[],"jobName":"paragraph_1574991056876_-543737712","id":"20191111-230359_705590019","dateCreated":"2019-11-28T20:30:56-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3583"},{"user":"anonymous","dateUpdated":"2019-11-28T20:30:56-0500","config":{"editorSetting":{"language":"scala","editOnDblClick":false,"completionKey":"TAB","completionSupport":true},"colWidth":12,"editorMode":"ace/mode/scala","fontSize":9,"results":{},"enabled":true},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1574991056878_-2043967168","id":"20191111-231156_520741420","dateCreated":"2019-11-28T20:30:56-0500","status":"READY","errorMessage":"","progressUpdateIntervalMs":500,"$$hashKey":"object:3584"}],"name":"Benchmarks/Experimental/CSV","id":"2EVDNA8FK","noteParams":{},"noteForms":{},"angularObjects":{"sh:shared_process":[],"spark:shared_process":[]},"config":{"isZeppelinNotebookCronEnable":false,"looknfeel":"default","personalizedMode":"false"},"info":{}}
